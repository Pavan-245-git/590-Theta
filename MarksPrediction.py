# -*- coding: utf-8 -*-
"""MarksPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DdgsQWsHWqtwOBhaRKra3cCPZGr2mUTx
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
l1=[66,77]
l2=[78,99]
marks=[l1,l2]
marks

df=pd.DataFrame(marks,columns=['Bio','Phy'],index=['Rahul','Rani'])

df

csvf=df.to_csv('/content/drive/MyDrive/m1week1/marks.csv')

import pandas as pd

data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}

#load data into a DataFrame object:
df = pd.DataFrame(data)

print(df)

import pandas as pd
import numpy as np

np.random.seed(42)
def Createdata():
  data = {
      'Age': np.random.randint(18, 70,size=20),
      'Salary': np.random.randint(100000,900000,size=20),
      'Purchased': np.random.choice([0,1], size=20),
      'Gender': np.random.choice(['Male','Female']),
      'City' : np.random.choice(['Hyderabad','Mumbai','Kerala','New York'], size=20),

  }
  df = pd.DataFrame(data)
  return df

df=Createdata()
print(df.head(10))

df.loc[5, 'Age'] = np.nan
df.loc[9, 'Salary'] = np.nan
df.head(10)

df['Age'].fillna(df['Age'].mean(), inplace=True)
df['Salary'].fillna(df['Salary'].median(), inplace=True)
df.head(10)

df.loc[5,'Age']=np.nan

df_dropped = df.dropna()
df_dropped.head(10)

df.head(10)

from sklearn.impute import KNNImputer
knn_imputer = KNNImputer(n_neighbors=3)
df[['Age', 'Salary']] = knn_imputer.fit_transform(df[['Age', 'Salary']])
df.head(10)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])
df.head(10)

df = pd.get_dummies(df, columns=['City'], drop_first=True)
df.head()

df['City'] = df['City'].map({'New York': 1, 'San Francisco': 2, 'Los Angeles': 3})
df.head()

mean_target  =df.groupby('City')['Purchased'].mean()
df['City_encoded'] = df['City'].map(mean_target)
df.head()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn import datasets,linear_model
from sklearn.metrics import mean_squared_error,r2_score

diabetes = datasets.load_diabetes()
x = diabetes.data[:,np.newaxis,2]
x_train = x[:-30]

x_test = x[-30:]
y_train = diabetes.target[:-30]
y_test = diabetes.target[-30:]

regr = linear_model.LinearRegression()
regr.fit(x_train,y_train)
y_pred = regr.predict(x_test)

print('Coefficients: \n',regr.coef_)
print('Variance score: %.2f' % r2_score(y_test,y_pred))
plt.scatter(x_test,y_test,color='black')
plt.plot(x_test,y_pred,color='blue',linewidth=3)
plt.xticks(())
plt.yticks(())
plt.show()
plt.scatter(x_test,y_test,color='black')
plt.plot(x_test,y_pred,color='blue',linewidth=3)
plt.xticks(())
plt.yticks(())
plt.show()

